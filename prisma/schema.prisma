generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["namedConstraints"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// USER
model User {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid // TODO: remove @default() in prod
  username  String   @db.VarChar(64)
  fullName  String?  @db.VarChar(64)
  avatar    String?
  bio       String?
  funding   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relationships
  modules       Module[]
  publishes     Version[]
  contributions Contribution[]
  usageQuota    UsageQuota?
  accessTokens  AccessToken[]
  createdTeams  Team[]
  teams         TeamMember[]
  stripeInfo    StripeCustomer?

  // Primary Key
  @@id([username])
}

model UsageQuota {
  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  user    User               @relation(fields: [username], references: [username])
  api     UsageQuotaApi?
  publish UsageQuotaPublish?

  // Primary Key
  @@id([username])
}

model UsageQuotaApi {
  // Properties
  limit Int      @default(60)
  used  Int      @default(0)
  reset DateTime @default(now()) // TODO: remove @default() in prod

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  quota UsageQuota @relation(fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model UsageQuotaPublish {
  // Properties
  limit Int      @default(5000000) // 5 Mega Byte
  used  Int      @default(0)
  reset DateTime @default(now()) // TODO: remove @default() in prod

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  quota UsageQuota @relation(fields: [username], references: [username])

  // Primary Key
  @@id([username])
}

model AccessToken {
  // Properties
  id          String       @default(uuid()) @db.Uuid
  hash        String       @unique @db.Char(64) // TODO: change length according to whatever algo we use
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  user User @relation(fields: [username], references: [username])

  // Primary Key
  @@id([id], map: "token")
}

enum Tier {
  // these are only examples
  HOBBY // $0 • api  1000 req/hr •  5mb           • public modules
  PRO //   $4 • api  5000 req/hr • 10mb + $0.1/mb • public modules
  TEAMS // $6 • api 10000 req/hr • 10mb + $0.1/mb • public modules • private modules • teams
}

enum Permission {
  USER_READ
  USER_WRITE
  TEAM_READ
  TEAM_WRITE
  MODULE_READ
  MODULE_WRITE
  MODULE_PUBLISH
  PRIVATE_MODULE_READ
  PRIVATE_MODULE_WRITE
  PRIVATE_MODULE_PUBLISH
}

model Contribution {
  // Foreign keys
  contributorName String @db.VarChar(64)
  moduleAuthor    String @db.VarChar(64)
  moduleName      String @db.VarChar(64)

  // Relationships
  contributor User   @relation(fields: [contributorName], references: [username])
  module      Module @relation(fields: [moduleAuthor, moduleName], references: [authorName, name])

  // Primary Key
  @@id([contributorName, moduleAuthor, moduleName], map: "contribution")
}

/// MODULE
model Module {
  // Properties
  id          String   @unique @default(uuid()) @db.Uuid
  name        String   @db.VarChar(64)
  fullName    String?  @db.VarChar(64)
  description String?
  homepage    String?
  repository  String?
  bugs        String?
  funding     String?
  license     License  @default(UNKNOWN)
  logo        String?
  keywords    String[]
  verified    Boolean  @default(false)
  malicious   Boolean  @default(false)
  private     Boolean  @default(false)
  unlisted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)

  // Relationships
  tags          Tag[]
  teams         Team[]
  versions      Version[]
  devConfig     DevConfig?
  vanityName    VanityModule?
  contributors  Contribution[]
  publishConfig PublishConfig?
  author        User           @relation(fields: [authorName], references: [username])

  // Primary Key
  @@id([authorName, name], map: "module")
}

enum License {
  // ref: https://api.github.com/licenses
  // Unknown just means we couldn't figure out what the license name is. It doesn't mean that the license is missing or invalid.
  UNKNOWN
  BSD_2_CLAUSE
  BSD_3_CLAUSE
  APACHE_2_0
  UNLICENSE
  AGPL_3_0
  LGPL_2_1
  BSL_1_0
  CC0_1_0
  EPL_2_0
  GPL_2_0
  GPL_3_0
  MPL_2_0
  MIT
}

model VanityModule {
  // Properties
  id   String @unique @default(uuid()) @db.Uuid
  name String @db.VarChar(64)

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module Module @relation(fields: [authorName, moduleName], references: [authorName, name])

  // Primary Key
  @@id([name, authorName, moduleName], map: "vanity_module")
}

model PublishConfig {
  // Properties
  main      String?
  bin       String[]
  lockfile  String?
  importMap String?
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module  Module            @relation(fields: [authorName, moduleName], references: [authorName, name])
  engines SupportedEngine[]

  // Primary Key
  @@id([authorName, moduleName], map: "publish_config")
}

model DevConfig {
  // Properties
  ignore    String[]
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  module Module          @relation(fields: [authorName, moduleName], references: [authorName, name])
  hooks  DevConfigHook[]

  // Primary Key
  @@id([authorName, moduleName], map: "dev_config")
}

enum HookName {
  PRE_PACK
  POST_PACK
  PRE_PUBLISH
  POST_PUBLISH
}

model DevConfigHook {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  name      HookName
  command   String
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  config DevConfig @relation(fields: [authorName, moduleName], references: [authorName, moduleName])

  // Primary Key
  @@id([authorName, moduleName, name], map: "dev_hook")
}

/// VERSION
model Version {
  // Properties
  id            String   @unique @default(uuid()) @db.Uuid
  name          String   @db.VarChar(64)
  publisherName String   @db.VarChar(64)
  deprecated    Boolean  @default(false)
  vulnerable    Boolean  @default(false)
  unlisted      Boolean  @default(false)
  lockfile      String?
  importMap     String?
  main          String?
  bin           String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName String @db.VarChar(64)
  moduleName String @db.VarChar(64)

  // Relationships
  tag                    Tag[]
  files                  File[]
  engines                SupportedEngine[]
  dependents             DependencyGraph[]           @relation("rDependentToVersion")
  dependencies           DependencyGraph[]           @relation("rDependencyToVersion")
  taggedDependencies     TaggedDependencyGraph[]
  thirdPartyDependencies ThirdPartyDependencyGraph[]
  publisher              User                        @relation(fields: [publisherName], references: [username])
  module                 Module                      @relation(fields: [authorName, moduleName], references: [authorName, name])

  // Primary Key
  @@id([authorName, moduleName, name], map: "version")
}

model Engine {
  // Properties
  id       String @unique @default(uuid()) @db.Uuid
  platform String @db.VarChar(64)
  range    String @db.VarChar(64)

  // relationships
  support SupportedEngine[]

  // Primary Key
  @@id([platform, range], map: "engine")
}

model SupportedEngine {
  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)
  platform    String @db.VarChar(64)
  range       String @db.VarChar(64)

  // Relationships
  engine  Engine        @relation(fields: [platform, range], references: [platform, range])
  version Version       @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])
  config  PublishConfig @relation(fields: [authorName, moduleName], references: [authorName, moduleName])

  // Primary Key
  @@id([authorName, moduleName, versionName, platform, range])
}

model Tag {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  name      String   @db.VarChar(64)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)

  // Relationships
  dependents TaggedDependencyGraph[]
  module     Module                  @relation(fields: [authorName, moduleName], references: [authorName, name])
  version    Version                 @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])

  // Primary Key
  @@id([authorName, moduleName, name], map: "tag")
}

model DependencyGraph {
  // Foreign keys
  dependentAuthor   String @db.VarChar(64)
  dependentName     String @db.VarChar(64)
  dependentVersion  String @db.VarChar(64)
  dependencyAuthor  String @db.VarChar(64)
  dependencyName    String @db.VarChar(64)
  dependencyVersion String @db.VarChar(64)

  // Relationships
  dependent  Version @relation("rDependencyToVersion", fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Version @relation("rDependentToVersion", fields: [dependencyAuthor, dependencyName, dependencyVersion], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyVersion])
}

model TaggedDependencyGraph {
  // Foreign keys
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyAuthor String @db.VarChar(64)
  dependencyName   String @db.VarChar(64)
  dependencyTag    String @db.VarChar(64)

  // Relationships
  dependent  Version @relation(fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency Tag     @relation(fields: [dependencyAuthor, dependencyName, dependencyTag], references: [authorName, moduleName, name])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyAuthor, dependencyName, dependencyTag])
}

model ThirdPartyModule {
  // Properties
  id   String @unique @default(uuid()) @db.Uuid
  path String

  // Foreign keys
  hostname String

  // Relationships
  host       ThirdPartyHost              @relation(fields: [hostname], references: [hostname])
  dependents ThirdPartyDependencyGraph[]

  // Primary Key
  @@id([hostname, path], map: "third_party_module")
}

model ThirdPartyHost {
  // Properties
  id       String  @unique @default(uuid()) @db.Uuid
  hostname String
  verified Boolean @default(false)

  // Relationships
  modules ThirdPartyModule[]

  // Primary Key
  @@id([hostname], map: "host")
}

model ThirdPartyDependencyGraph {
  // Foreign keys
  dependentAuthor  String @db.VarChar(64)
  dependentName    String @db.VarChar(64)
  dependentVersion String @db.VarChar(64)
  dependencyHost   String
  dependencyPath   String

  // Relationships
  dependent  Version          @relation(fields: [dependentAuthor, dependentName, dependentVersion], references: [authorName, moduleName, name])
  dependency ThirdPartyModule @relation(fields: [dependencyHost, dependencyPath], references: [hostname, path])

  // Primary Key
  @@id([dependentAuthor, dependentName, dependentVersion, dependencyHost, dependencyPath])
}

/// FILE
model File {
  // Properties
  id        String   @unique @default(uuid()) @db.Uuid
  path      String
  txid      String   @db.VarChar(43) // E1qkswwu4jfKIUJQ_-aahNzvUeG1lAJxaBjO8x6Uxro
  size      Int
  mimeType  String?  @db.VarChar(64)
  createdAt DateTime @default(now())

  // Foreign keys
  authorName  String @db.VarChar(64)
  moduleName  String @db.VarChar(64)
  versionName String @db.VarChar(64)

  // Relationships
  version Version @relation(fields: [authorName, moduleName, versionName], references: [authorName, moduleName, name])

  // Primary Key
  @@id([authorName, moduleName, versionName, path], map: "file")
}

/// TEAM
model Team {
  // Properties
  id         String   @unique @default(uuid()) @db.Uuid
  name       String   @db.VarChar(64)
  moduleName String   @db.VarChar(64)
  createdAt  DateTime
  updatedAt  DateTime

  // Foreign keys
  ownerName String @db.VarChar(64)

  // Relationships
  members TeamMember[]
  owner   User         @relation(fields: [ownerName], references: [username])
  module  Module       @relation(fields: [ownerName, moduleName], references: [authorName, name])

  // Primary Key
  @@id([ownerName, name], map: "team")
}

model TeamMember {
  // Properties
  permissions TeamPermission[]

  // Foreign keys
  memberName String @db.VarChar(64)
  teamOwner  String @db.VarChar(64)
  teamName   String @db.VarChar(64)

  // Relationships
  team Team @relation(fields: [teamOwner, teamName], references: [ownerName, name])
  user User @relation(fields: [memberName], references: [username])

  // Primary Key
  @@id([memberName, teamOwner, teamName], map: "member")
}

enum TeamPermission {
  TEAM_READ
  TEAM_WRITE
  MODULE_WRITE
  MODULE_PUBLISH
}

/// STRIPE
enum StripePlan {
  HOBBY
  PRO
  TEAMS
  OVERAGE
}

model StripeCustomer {
  id             String @db.VarChar(18) // cus_K2Y09LC0tkknJZ
  tier           Tier   @default(HOBBY)
  payment_method Json //                   Stores your customer's payment instruments.

  // Foreign keys
  username String @db.VarChar(64)

  // Relationships
  subscription StripeSubscription[]
  user         User                 @relation(fields: [username], references: [username])

  // Primary Key
  @@id([id], map: "customer")
}

model StripeProduct {
  id          String     @db.VarChar(19) // prod_K2OkC0R6yfuwhH
  name        String
  description String
  plan        StripePlan @unique
  active      Boolean //                    Whether the product is currently available for purchase.

  // Relationships
  subscriptions StripeSubscription[]
  prices        StripePrice[]

  // Primary Key
  @@id([id], map: "product")
}

enum StripePriceInterval {
  MONTH
  YEAR
}

model StripePrice {
  id                   String              @db.VarChar(30) // price_1JOJxPGRIHfUwmWv8z0WKz5a
  price                Int //                                 The unit amount as a positive integer in the smallest currency unit
  active               Boolean //                             Whether the price can be used for new purchases.
  interval             StripePriceInterval //                 The frequency at which a subscription is billed.
  interval_count       Int //                                 The number of intervals between subscription billings.
  trial_interval_count Int //                                 The number of trial intervals when subscribing a customer to this price

  // Foreign keys
  product_id String @db.VarChar(19) // prod_K2OkC0R6yfuwhH

  // Relationships
  product StripeProduct @relation(fields: [product_id], references: [id])

  // Primary Key
  StripeSubscription StripeSubscription[]
  @@id([id], map: "price")
}

enum StripeSubStatus {
  TRIAL
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
}

model StripeSubscription {
  // Properties
  id             String          @db.VarChar(18) // sub_K2Y00SfnTOnuRQ
  status         StripeSubStatus
  interval_start DateTime        @default(now()) // Start of the current period that the subscription has been invoiced for.
  interval_end   DateTime        @default(now()) // End of the current period that the subscription has been invoiced for. 
  trial_start    DateTime        @default(now()) // If the subscription has a trial, the beginning of that trial.
  trial_end      DateTime        @default(now()) // If the subscription has a trial, the end of that trial.
  cancel_at_end  DateTime        @default(now()) // If true the subscription has been canceled by the user and will be deleted at the end of the billing period.
  canceled       Boolean //                         If the subscription has been canceled by the user
  canceled_at    DateTime        @default(now()) // If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
  cancel_at      DateTime        @default(now()) // A date in the future at which the subscription will automatically get canceled.
  ended          Boolean //                         If the subscription has ended
  ended_at       DateTime        @default(now()) // If the subscription has ended, the timestamp of the date the subscription ended.
  created_at     DateTime        @default(now()) // Time at which the subscription was created.
  updated_at     DateTime        @default(now()) @updatedAt

  // Foreign keys
  customer_id String @db.VarChar(18)
  product_id  String @db.VarChar(19)
  price_id    String @db.VarChar(30)

  // Relationships
  customer StripeCustomer @relation(fields: [customer_id], references: [id])
  product  StripeProduct  @relation(fields: [product_id], references: [id])
  price    StripePrice    @relation(fields: [price_id], references: [id])

  // Primary Key
  @@id([id], map: "subscription")
}
